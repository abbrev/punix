Punix kernel TODO, in roughly chronological order:

* add soft interrupts
	* can use existing "callout" mechanism with few changes
	* return from kernel to userspace through a common routine; this routine will handle callouts, pending signals, etc
	* this will allow us to remove interrupt masks in functions like wakeup() as they will not be called from an interrupt context. the result of this is device drivers will run smoother, which is especially important for the audio device (ie, no more stutters)

* finish writing process management
	* signals (somewhat working but needs to be finished)
	* vfork (basic functionality works; needs to handle memory, file descriptors, etc.)
	* exec (same as vfork; also needs to handle binary format; this depends partly on the filesystem)

* write device drivers
	* tty middle layer (dev_vt works almost completely)

* write filesystem (log-structured filesystem)

* get a working userland dev environment for "real" computers to work with kernel's conventions, eg, executable bin and lib format

* write and/or adapt a small libc (look into using uClibc)

* write/adapt user-land utilities/applications from BusyBox, Minix, or GNU (or possibly Uzix)

* write instruction emulators to handle instructions of higher 680x0 uP's (find out the true usefulness of this)
	* floating-point emulation
	* bit manipulation
	* more addressing modes
