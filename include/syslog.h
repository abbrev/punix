#ifndef _SYSLOG_H_
#define _SYSLOG_H_

/* should be POSIX compliant */

/* flag values for 'option' value of openlog() */
#define LOG_PID		0x01	/* log the process ID with each message */
#define LOG_CONS	0x02	/* log to the system console on error */
#define LOG_NDELAY	0x04	/* connect to syslog daemon immediately */
#define LOG_ODELAY	0x08	/* delay open until syslog() is called */
#define LOG_NOWAIT	0x10	/* do not wait for child processes */

/* values for 'facility' argument of openlog() */
#define LOG_KERN	(0<<3)	/* message generated by the system */
#define LOG_USER	(1<<3)	/* message generated by a process */
#define LOG_MAIL	(2<<3)	/* message generated by mail system */
#define LOG_DAEMON	(3<<3)	/* message generated by system daemon */
#define LOG_AUTH	(4<<3)	/* message generated by authorization daemon */
#define LOG_LPR		(6<<3)	/* message generated by printer system */
#define LOG_NEWS	(7<<3)	/* message generated by news system */
#define LOG_UUCP	(8<<3)	/* message generated by UUCP system */
#define LOG_CRON	(9<<3)	/* message generated by clock daemon */
#define LOG_LOCAL0	(16<<3)	/* reserved for local use */
#define LOG_LOCAL1	(17<<3)	/* reserved for local use */
#define LOG_LOCAL2	(18<<3)	/* reserved for local use */
#define LOG_LOCAL3	(19<<3)	/* reserved for local use */
#define LOG_LOCAL4	(20<<3)	/* reserved for local use */
#define LOG_LOCAL5	(21<<3)	/* reserved for local use */
#define LOG_LOCAL6	(22<<3)	/* reserved for local use */
#define LOG_LOCAL7	(23<<3)	/* reserved for local use */

/* values for 'priority' argument of syslog() */
#define LOG_EMERG	0	/* panic condition was reported to all processes */
#define LOG_ALERT	1	/* condition that should be corrected immediately */
#define LOG_CRIT	2	/* critical condition */
#define LOG_ERR		3	/* error message */
#define LOG_WARNING	4	/* warning message */
#define LOG_NOTICE	5	/* condition requiring special handling */
#define LOG_INFO	6	/* general information message */
#define LOG_DEBUG	7	/* message useful for debuggin programs */

/* a mask for priority 'pri' */
#define LOG_MASK(pri)	(1<<(pri))

void	closelog(void);
void	openlog(const char *__ident, int __option, int __facility);
int	setlogmask(int __mask);
void	syslog(int __priority, const char *__format, ...);

#endif
