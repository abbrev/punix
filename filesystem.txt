Punix filesystem notes
======================

The filesystem in Punix will reside in FlashROM. The TI-92+ has 2MB FlashROM in total, which includes the read-only boot code and Punix kernel code (and other stuff like calculator certificate, etc.). The flashrom is composed of 32 64KiB pages, each of which can be cleared (erased) separately. When a page is erased, all of its bits are set to 1. A 0 bit can be set to 1 only by clearing an entire page.

The kernel will occupy perhaps 50k-400k (depending on how many and which features I include in the kernel), leaving at least 1.5MB FlashROM for the filesystem.

The filesystem will have wear-leveling to maximize the life of the FlashROM. It will be a log-structured file system, similar to JFFS2 in Linux, but it will use fixed-sized log entries (blocks) instead of variable-sized log entries.

Here is my current vision of the structure of the filesystem (this is in flux as I develop it more fully):

Each file will be composed of one or more blocks. Each block starts with a header with the block's status, inode number, block number (within the inode), and revision number. Block number 0 for each inode contains the inode meta-data, including file size, user, group, mode, timestamps, and reference count. Block number 1 and higher contain the file's contents. Alternatively, the file contents can start at the end of block 0 after the meta-data, which consumes only 20 bytes or so.

The status of a log entry is one of "free", "used", "deleted", "used" + "deleted", or "dead" (these names are likely to change). A log entry's status can progress only in the direction "free" -> "used" -> "used + deleted" -> "deleted" -> "dead", possibly skipping some steps (this is because each step clears one or more bits to 0). Here are the meanings of each status:

* "Free" means the block is all 1 bits (ready to be written with any data).
* "Used" means the block is alive and contains data.
* "Deleted" means the inode (file) is deleted.
* "Dead" means the block is filled with data but is no longer used. This data is not copied to another page when this page is erased.

If a block is "used + deleted", it is still referenced in the kernel (at least one file stream references this file). Upon mounting, any entries found to be "used + deleted" are changed to "dead".

When a inode's block is changed, a new block is written with the same ino and block no, but with a higher revision no, in a block whose status is "free". Then the status of the old block is changed to "dead". (The redundancy of using revision numbers and "dead" status might not be necessary; rev nums may be removed from block headers.)

Upon mounting the volume, the fs driver scans the entire volume to find the superblock (ino 0) and root dir (ino 1), and to build a small tree or cache of the filesystem.

To find the inode of a file, its containing directory is traversed. The inode is cached, so subsequent lookups are faster. (This is typical of most filesystems).

To find an inode for the first time (during pathname resolution, for example), the fs searches the entire volume until it finds the inode (most other filesystems have a calculated mapping of inode number to its location on the medium, so they don't need to search like this). The inode's location in flash is cached, so subsequent searches for the inode are much faster.

$Id: filesystem.txt,v 1.1 2007/08/28 06:47:10 fredfoobar Exp $
